Active Record Querying

find
  Find the client with primary key (id) 10.
  client = Client.find(10) :- (SELECT * FROM clients WHERE (clients.id = 10) LIMIT 1)

  user = User.find(2)
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]

  user = User.find([2,5])
  ** this will return error if record not found.
  User Load (1.2ms)  SELECT "users".* FROM "users" WHERE "users"."id" IN ($1, $2)  [["id", 2], ["id", 5]]

take
  The take method retrieves a record without any implicit ordering.
  client = Client.take :- (SELECT * FROM clients LIMIT 1)

  user = User.take(3)
  User Load (0.9ms)  SELECT  "users".* FROM "users" LIMIT $1  [["LIMIT", 3]]

first
  The first method finds the first record ordered by primary key (default). For example:
  client = Client.first :- (SELECT * FROM clients ORDER BY clients.id ASC LIMIT 1)

  user = User.first(4)
  User Load (1.0ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT $1  [["LIMIT", 4]]

order
  Order will order the data according to defined column
  user = User.order(:name).first(4)
  User Load (1.0ms)  SELECT  "users".* FROM "users" ORDER BY "users"."name" ASC LIMIT $1  [["LIMIT", 4]]

last
  The last method finds the last record ordered by primary key (default)
  user = User.last
  User Load (0.7ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 1]]
  user = User.last(3)
  User Load (1.2ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" DESC LIMIT $1  [["LIMIT", 3]]
  user = User.order(:name).last(3)
  User Load (1.0ms)  SELECT  "users".* FROM "users" ORDER BY "users"."name" DESC LIMIT $1  [["LIMIT", 3]]

find_by
  user = User.find_by name: "John Doe"
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE "users"."name" = $1 LIMIT $2  [["name", "John Doe"], ["LIMIT", 1]]

  find_by! same as find_by but raises error if not found any.

where
  user = User.where(id: 5)
  User Load (1.1ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT $2  [["id", 5], ["LIMIT", 11]]

  user = User.where(created_at: (Time.now.midnight - 1.day)..Time.now.midnight)
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE "users"."created_at" BETWEEN $1 AND $2 LIMIT $3  [["created_at", "2019-03-17 18:30:00"], ["created_at", "2019-03-18 18:30:00"], ["LIMIT", 11]]

  user = User.where(id: [5,4,3,2,1])
  User Load (1.4ms)  SELECT  "users".* FROM "users" WHERE "users"."id" IN ($1, $2, $3, $4, $5) LIMIT $6  [["id", 5], ["id", 4], ["id", 3], ["id", 2], ["id", 1], ["LIMIT", 11]]

not
  user = User.where.not(id: [5,4,3,2,1])
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE "users"."id" NOT IN ($1, $2, $3, $4, $5) LIMIT $6  [["id", 5], ["id", 4], ["id", 3], ["id", 2], ["id", 1], ["LIMIT", 11]]

or
  user = User.where.not(id: [5,4,3,2,1]).or(User.where.not(name: "John Doe"))
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE ("users"."id" NOT IN ($1, $2, $3, $4, $5) OR "users"."name" != $6) LIMIT $7  [["id", 5], ["id", 4], ["id", 3], ["id", 2], ["id", 1], ["name", "John Doe"], ["LIMIT", 11]]

order
  user = User.order(:created_at)
  User Load (1.8ms)  SELECT  "users".* FROM "users" ORDER BY "users"."created_at" ASC LIMIT $1  [["LIMIT", 11]]

  user = User.order(created_at: :desc)
  User Load (1.0ms)  SELECT  "users".* FROM "users" ORDER BY "users"."created_at" DESC LIMIT $1  [["LIMIT", 11]]

  user = User.order(created_at: :desc, updated_at: :asc)
  User Load (0.7ms)  SELECT  "users".* FROM "users" ORDER BY "users"."created_at" DESC, "users"."updated_at" ASC LIMIT $1  [["LIMIT", 11]]

select
  user = User.order(created_at: :desc, updated_at: :asc).select(:name)
  user = User.select(:name)
  User Load (0.7ms)  SELECT  "users"."name" FROM "users" LIMIT $1  [["LIMIT", 11]]

distinct
  user = User.select(:name).distinct
  User Load (0.9ms)  SELECT  DISTINCT "users"."name" FROM "users" LIMIT $1  [["LIMIT", 11]]

limt
  team = Team.all.limit(5)
  Team Load (37.6ms)  SELECT  "teams".* FROM "teams" LIMIT $1  [["LIMIT", 5]]


  team = Team.all.limit(5).offset(3)
  Team Load (0.8ms)  SELECT  "teams".* FROM "teams" LIMIT $1 OFFSET $2  [["LIMIT", 5], ["OFFSET", 3]]

group
  player = Player.select(:team_id).group(:team_id).count
  (1.4ms)  SELECT COUNT("players"."team_id") AS count_team_id, "players"."team_id" AS players_team_id FROM "players" GROUP BY "players"."team_id"

Having
  player = Player.select(:team_id).group(:team_id).having("count(team_id)>2")
  Player Load (1.4ms)  SELECT  "players"."team_id" FROM "players" GROUP BY "players"."team_id" HAVING (count(team_id)>2) LIMIT $1  [["LIMIT", 11]]

  player = Player.select(:team_id).group(:team_id).having("count(team_id)<?",3)
  Player Load (1.5ms)  SELECT  "players"."team_id" FROM "players" GROUP BY "players"."team_id" HAVING (count(team_id)<3) LIMIT $1  [["LIMIT", 11]]

Overriding conditions

unscope
  team = Team.all.order(id: :desc).unscope(:order)
    returns object with id in descending order.
  team = Team.all.order(id: :desc).unscope(:order)
    returns objects with ascending order.

  team = Team.all.order(id: :desc).merge(Team.unscope(:order))

only
  team = Team.all.order(id: :desc).limit(6).only(:order)

  only keeps the query to be applied only such as above will return from only order method and will ignore limit method.


reorder
  team = Team.all.order(id: :desc).limit(6).only(:order).reorder(:id)
  this will override default scope

reverse_order
  Team.all.order(id: :desc).limit(6).only(:order).reverse_order


include and joins

  user = User.includes(:posts)
  User Load (0.8ms)  SELECT  "users".* FROM "users" LIMIT $1  [["LIMIT", 11]]
  Post Load (1.2ms)  SELECT "posts".* FROM "posts" WHERE "posts"."user_id" IN ($1, $2, $3, $4)  [["user_id", 2], ["user_id", 3], ["user_id", 5], ["user_id", 6]]

  user = Post.joins(:user)
  Post Load (1.3ms)  SELECT  "posts".* FROM "posts" INNER JOIN "users" ON "users"."id" = "posts"."user_id" LIMIT $1  [["LIMIT", 11]]

find_or_create_by
  usr = User.find_or_create_by(name: "John Doe")
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE "users"."name" = $1 LIMIT $2  [["name", "John Doe"], ["LIMIT", 1]]


find_by_sql
  usr = User.find_by_sql("select * from users")
  User Load (1.0ms)  select * from users
pluck
  usr = User.pluck(:id)
  (0.9ms)  SELECT "users"."id" FROM "users"
some common caluculations

count: User.count(:id)
average:User.average(:id)
sum: User.sum(:id)
maximum: User.maximum(:id)
minimum:User.minimum(:id)
